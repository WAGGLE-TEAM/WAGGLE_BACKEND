plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'application'
    id 'jacoco'
}

group = 'com.trip'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.trip.api'
}

jacoco {
    toolVersion = '0.8.5'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'jacoco'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    bootJar.enabled = false
    jar.enabled = true

    if (name == 'waggle-api') {
        bootJar.enabled = true
    }

    repositories {
        mavenCentral()
    }

    ext {
        snippetsDir = file('./build/generated-snippets')
    }

    dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // JPA
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'org.postgresql:postgresql'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // Spring REST Docs
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

        // Spring Security
        implementation 'org.springframework.boot:spring-boot-starter-security'
        testImplementation 'org.springframework.security:spring-security-test'
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    javadoc {
        options.addStringOption("locale","ko_KR");
        options.addStringOption("encoding","UTF-8");
        options.addStringOption("charset","UTF-8");
        options.addStringOption("docencoding","UTF-8");
    }

    asciidoctor {
        inputs.dir snippetsDir
        // 다른 Task 에 의존한다는 것을 알리는 것이다.
        // test Task 에 의존함을 알린다.
        // asciidoctor task 를 실행할 때, test task 를 먼저 실행한다.
        dependsOn test
    }

    task copyDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    build {
        dependsOn copyDocument
    }

    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
        finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            html.required = true
            xml.required = false
            csv.required = true
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.70
                }

                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.50
                }

                excludes = ["*.Q*"]
            }
        }
    }
}